(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[5],{"0473":function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <div ref="virtualListScrollTargetRef" class="scroll" style="max-height: 230px">\r\n    <div class="q-pa-md bg-yellow">\r\n      Above the list - scrolls with the list\r\n    </div>\r\n\r\n    <q-virtual-scroll\r\n      :scroll-target="scrollTarget"\r\n      :items="heavyList"\r\n      separator\r\n    >\r\n      <template v-slot="{ item, index }">\r\n        <q-item\r\n          :key="index"\r\n          dense\r\n        >\r\n          <q-item-section>\r\n            <q-item-label>\r\n              #{{ index }} - {{ item.label }}\r\n            </q-item-label>\r\n          </q-item-section>\r\n        </q-item>\r\n      </template>\r\n    </q-virtual-scroll>\r\n\r\n    <div class="q-pa-md bg-yellow">\r\n      Below the list - scrolls with the list\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1)\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n      scrollTarget: void 0\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.scrollTarget = this.$refs.virtualListScrollTargetRef\r\n  }\r\n}\r\n<\/script>\r\n'},"181b":function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <q-virtual-scroll\r\n    :items="heavyList"\r\n    virtual-scroll-horizontal\r\n  >\r\n    <template v-slot="{ item, index }">\r\n      <div :key="index" class="row items-center">\r\n        <q-separator v-if="index === 0" vertical spaced />\r\n\r\n        <q-avatar v-if="item.avatar === true" class="bg-black text-white q-my-md">\r\n          {{ index % 10 + 1 }}\r\n        </q-avatar>\r\n\r\n        <q-item\r\n          v-else\r\n          dense\r\n          clickable\r\n        >\r\n          <q-item-section>\r\n            <q-item-label>\r\n              #{{ index }} - {{ item.label }}\r\n            </q-item-label>\r\n          </q-item-section>\r\n        </q-item>\r\n\r\n        <q-separator vertical spaced />\r\n      </div>\r\n    </template>\r\n  </q-virtual-scroll>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1),\r\n    avatar: i % 5 === 0\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n'},"2c87":function(r,n,t){"use strict";t.r(n),n["default"]="<template>\r\n  <div class=\"q-pa-md\">\r\n    <q-virtual-scroll\r\n      type=\"table\"\r\n      style=\"max-height: 70vh\"\r\n      :virtual-scroll-item-size=\"48\"\r\n      :virtual-scroll-sticky-size-start=\"48\"\r\n      :virtual-scroll-sticky-size-end=\"32\"\r\n      :items=\"heavyList\"\r\n    >\r\n      <template v-slot:before>\r\n        <thead class=\"thead-custom-sticky text-left\">\r\n          <tr>\r\n            <th>#</th>\r\n            <th v-for=\"col in columns\" :key=\"'1--' + col.name2\">\r\n              {{ col.name1 }}\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th>Index</th>\r\n            <th v-for=\"col in columns\" :key=\"'2--' + col.name2\">\r\n              {{ col.name2 }}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n      </template>\r\n\r\n      <template v-slot:after>\r\n        <tfoot class=\"tfoot-custom-sticky text-left\">\r\n          <tr>\r\n            <th>#</th>\r\n            <th v-for=\"col in columns\" :key=\"'3--' + col.name2\">\r\n              {{ col.name1 }}\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th>Index</th>\r\n            <th v-for=\"col in columns\" :key=\"'4--' + col.name2\">\r\n              {{ col.name2 }}\r\n            </th>\r\n          </tr>\r\n        </tfoot>\r\n      </template>\r\n\r\n      <template v-slot=\"{ item: row, index }\">\r\n        <tr :key=\"index\">\r\n          <td>#{{ index }}</td>\r\n          <td v-for=\"col in columns\" :key=\"index + '-' + col.name2\">\r\n            {{ row[col.prop] }}\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </q-virtual-scroll>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n.thead-custom-sticky tr > *,\r\n.tfoot-custom-sticky tr > *\r\n  position: sticky\r\n  opacity: 1\r\n  z-index: 1\r\n  background-color: black\r\n  color: white\r\n\r\n.thead-custom-sticky tr:last-child > *\r\n  top: 0\r\n\r\n.tfoot-custom-sticky tr:first-child > *\r\n  bottom: 0\r\n</style>\r\n\r\n<script>\r\nconst data = [\r\n  {\r\n    name: 'Frozen Yogurt',\r\n    calories: 159,\r\n    fat: 6.0,\r\n    carbs: 24,\r\n    protein: 4.0,\r\n    sodium: 87,\r\n    calcium: '14%'\r\n  },\r\n  {\r\n    name: 'Ice cream sandwich',\r\n    calories: 237,\r\n    fat: 9.0,\r\n    carbs: 37,\r\n    protein: 4.3,\r\n    sodium: 129,\r\n    calcium: '8%'\r\n  },\r\n  {\r\n    name: 'Eclair',\r\n    calories: 262,\r\n    fat: 16.0,\r\n    carbs: 23,\r\n    protein: 6.0,\r\n    sodium: 337,\r\n    calcium: '6%'\r\n  },\r\n  {\r\n    name: 'Cupcake',\r\n    calories: 305,\r\n    fat: 3.7,\r\n    carbs: 67,\r\n    protein: 4.3,\r\n    sodium: 413,\r\n    calcium: '3%'\r\n  },\r\n  {\r\n    name: 'Gingerbread',\r\n    calories: 356,\r\n    fat: 16.0,\r\n    carbs: 49,\r\n    protein: 3.9,\r\n    sodium: 327,\r\n    calcium: '7%'\r\n  },\r\n  {\r\n    name: 'Jelly bean',\r\n    calories: 375,\r\n    fat: 0.0,\r\n    carbs: 94,\r\n    protein: 0.0,\r\n    sodium: 50,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Lollipop',\r\n    calories: 392,\r\n    fat: 0.2,\r\n    carbs: 98,\r\n    protein: 0,\r\n    sodium: 38,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Honeycomb',\r\n    calories: 408,\r\n    fat: 3.2,\r\n    carbs: 87,\r\n    protein: 6.5,\r\n    sodium: 562,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Donut',\r\n    calories: 452,\r\n    fat: 25.0,\r\n    carbs: 51,\r\n    protein: 4.9,\r\n    sodium: 326,\r\n    calcium: '2%'\r\n  },\r\n  {\r\n    name: 'KitKat',\r\n    calories: 518,\r\n    fat: 26.0,\r\n    carbs: 65,\r\n    protein: 7,\r\n    sodium: 54,\r\n    calcium: '12%'\r\n  }\r\n]\r\n\r\nconst columns = [\r\n  { name1: '(100g serving)', name2: 'Dessert', prop: 'name' },\r\n  { name1: '(val)', name2: 'Calories', prop: 'calories' },\r\n  { name1: '(g)', name2: 'Fat', prop: 'fat' },\r\n  { name1: '(g)', name2: 'Carbs', prop: 'carbs' },\r\n  { name1: '(g)', name2: 'Protein', prop: 'protein' },\r\n  { name1: '(mg)', name2: 'Sodium', prop: 'sodium' },\r\n  { name1: '(%)', name2: 'Calcium', prop: 'calcium' }\r\n]\r\n\r\nconst heavyList = []\r\n\r\n// adding same data multiple times to\r\n// create a huge list\r\nfor (let i = 0; i <= 1000; i++) {\r\n  Array.prototype.push.apply(heavyList, data)\r\n}\r\n\r\n// we are not going to change this array,\r\n// so why not freeze it to avoid Vue adding overhead\r\n// with state change detection\r\nObject.freeze(heavyList)\r\nObject.freeze(columns)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n      columns\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n"},3988:function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <div id="virtual-scroll-target" class="scroll" style="max-height: 230px">\r\n    <div class="q-pa-md bg-yellow">\r\n      Above the list - scrolls with the list\r\n    </div>\r\n\r\n    <q-virtual-scroll\r\n      scroll-target="#virtual-scroll-target"\r\n      :items="heavyList"\r\n      separator\r\n    >\r\n      <template v-slot="{ item, index }">\r\n        <q-item\r\n          :key="index"\r\n          dense\r\n        >\r\n          <q-item-section>\r\n            <q-item-label>\r\n              #{{ index }} - {{ item.label }}\r\n            </q-item-label>\r\n          </q-item-section>\r\n        </q-item>\r\n      </template>\r\n    </q-virtual-scroll>\r\n\r\n    <div class="q-pa-md bg-yellow">\r\n      Below the list - scrolls with the list\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1)\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n'},"4fa1":function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <div>\r\n    <div class="q-pa-md row justify-center">\r\n      <q-input\r\n        style="min-width: 10em"\r\n        type="number"\r\n        v-model.number="virtualListIndex"\r\n        :min="0"\r\n        :max="9999"\r\n        label="Scroll to index"\r\n        input-class="text-right"\r\n      />\r\n      <q-btn\r\n        class="q-ml-sm"\r\n        label="Go"\r\n        no-caps\r\n        color="primary"\r\n        @click="$refs.virtualListRef.scrollTo(virtualListIndex, \'start-force\')"\r\n      />\r\n    </div>\r\n\r\n    <q-virtual-scroll\r\n      ref="virtualListRef"\r\n      style="max-height: 300px;"\r\n      component="q-list"\r\n      :items="heavyList"\r\n      separator\r\n      @virtual-scroll="onVirtualScroll"\r\n    >\r\n      <template v-slot="{ item, index }">\r\n        <q-item\r\n          :key="index"\r\n          dense\r\n          :class="{ \'bg-black text-white\': index === virtualListIndex }"\r\n        >\r\n          <q-item-section>\r\n            <q-item-label>\r\n              #{{ index }} - {{ item.label }}\r\n            </q-item-label>\r\n          </q-item-section>\r\n        </q-item>\r\n      </template>\r\n    </q-virtual-scroll>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1)\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n      virtualListIndex: 1200\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$refs.virtualListRef.scrollTo(this.virtualListIndex)\r\n  },\r\n\r\n  methods: {\r\n    onVirtualScroll ({ index }) {\r\n      this.virtualListIndex = index\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n'},6072:function(r,n,t){"use strict";t.r(n),n["default"]="<template>\r\n  <div class=\"q-pa-md\">\r\n    <q-virtual-scroll\r\n      type=\"table\"\r\n      style=\"max-height: 70vh\"\r\n      :virtual-scroll-item-size=\"48\"\r\n      :virtual-scroll-sticky-size-start=\"48\"\r\n      :virtual-scroll-sticky-size-end=\"32\"\r\n      :items=\"heavyList\"\r\n    >\r\n      <template v-slot:before>\r\n        <thead class=\"thead-sticky text-left\">\r\n          <tr>\r\n            <th>Index</th>\r\n            <th v-for=\"col in columns\" :key=\"'1--' + col.name\">\r\n              {{ col.name }}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n      </template>\r\n\r\n      <template v-slot:after>\r\n        <tfoot class=\"tfoot-sticky text-left\">\r\n          <tr>\r\n            <th>Index</th>\r\n            <th v-for=\"col in columns\" :key=\"'2--' + col.name\">\r\n              {{ col.name }}\r\n            </th>\r\n          </tr>\r\n        </tfoot>\r\n      </template>\r\n\r\n      <template v-slot=\"{ item: row, index }\">\r\n        <tr :key=\"index\">\r\n          <td>#{{ index }}</td>\r\n          <td v-for=\"col in columns\" :key=\"index + '-' + col.name\">\r\n            {{ row[col.prop] }}\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </q-virtual-scroll>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n.thead-sticky tr > *,\r\n.tfoot-sticky tr > *\r\n  position: sticky\r\n  opacity: 1\r\n  z-index: 1\r\n  background: black\r\n  color: white\r\n\r\n.thead-sticky tr:last-child > *\r\n  top: 0\r\n\r\n.tfoot-sticky tr:first-child > *\r\n  bottom: 0\r\n</style>\r\n\r\n<script>\r\nconst data = [\r\n  {\r\n    name: 'Frozen Yogurt',\r\n    calories: 159,\r\n    fat: 6.0,\r\n    carbs: 24,\r\n    protein: 4.0,\r\n    sodium: 87,\r\n    calcium: '14%'\r\n  },\r\n  {\r\n    name: 'Ice cream sandwich',\r\n    calories: 237,\r\n    fat: 9.0,\r\n    carbs: 37,\r\n    protein: 4.3,\r\n    sodium: 129,\r\n    calcium: '8%'\r\n  },\r\n  {\r\n    name: 'Eclair',\r\n    calories: 262,\r\n    fat: 16.0,\r\n    carbs: 23,\r\n    protein: 6.0,\r\n    sodium: 337,\r\n    calcium: '6%'\r\n  },\r\n  {\r\n    name: 'Cupcake',\r\n    calories: 305,\r\n    fat: 3.7,\r\n    carbs: 67,\r\n    protein: 4.3,\r\n    sodium: 413,\r\n    calcium: '3%'\r\n  },\r\n  {\r\n    name: 'Gingerbread',\r\n    calories: 356,\r\n    fat: 16.0,\r\n    carbs: 49,\r\n    protein: 3.9,\r\n    sodium: 327,\r\n    calcium: '7%'\r\n  },\r\n  {\r\n    name: 'Jelly bean',\r\n    calories: 375,\r\n    fat: 0.0,\r\n    carbs: 94,\r\n    protein: 0.0,\r\n    sodium: 50,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Lollipop',\r\n    calories: 392,\r\n    fat: 0.2,\r\n    carbs: 98,\r\n    protein: 0,\r\n    sodium: 38,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Honeycomb',\r\n    calories: 408,\r\n    fat: 3.2,\r\n    carbs: 87,\r\n    protein: 6.5,\r\n    sodium: 562,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Donut',\r\n    calories: 452,\r\n    fat: 25.0,\r\n    carbs: 51,\r\n    protein: 4.9,\r\n    sodium: 326,\r\n    calcium: '2%'\r\n  },\r\n  {\r\n    name: 'KitKat',\r\n    calories: 518,\r\n    fat: 26.0,\r\n    carbs: 65,\r\n    protein: 7,\r\n    sodium: 54,\r\n    calcium: '12%'\r\n  }\r\n]\r\n\r\nconst columns = [\r\n  { name: 'Dessert (100g serving)', prop: 'name' },\r\n  { name: 'Calories', prop: 'calories' },\r\n  { name: 'Fat (g)', prop: 'fat' },\r\n  { name: 'Carbs (g)', prop: 'carbs' },\r\n  { name: 'Protein (g)', prop: 'protein' },\r\n  { name: 'Sodium (mg)', prop: 'sodium' },\r\n  { name: 'Calcium (%)', prop: 'calcium' }\r\n]\r\n\r\nconst heavyList = []\r\n\r\n// adding same data multiple times to\r\n// create a huge list\r\nfor (let i = 0; i <= 1000; i++) {\r\n  Array.prototype.push.apply(heavyList, data)\r\n}\r\n\r\n// we are not going to change these arrays,\r\n// so why not freeze them to avoid Vue adding overhead\r\n// with state change detection\r\nObject.freeze(heavyList)\r\nObject.freeze(columns)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n      columns\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n"},"6e50":function(r,n,t){"use strict";t.r(n),n["default"]="<template>\r\n  <q-virtual-scroll\r\n    style=\"max-height: 300px; overflow-x: hidden\"\r\n    :items-size=\"size\"\r\n    :items-fn=\"getItems\"\r\n    :virtual-scroll-item-size=\"78\"\r\n    separator\r\n  >\r\n    <template v-slot=\"{ item, index }\">\r\n      <async-component :key=\"index\" :index=\"item.index\" :sent=\"item.sent\"></async-component>\r\n    </template>\r\n  </q-virtual-scroll>\r\n</template>\r\n\r\n<script>\r\nconst size = 100000\r\nconst allItems = Array(size).fill(null).map((_, index) => ({\r\n  index,\r\n  sent: Math.random() > 0.5\r\n}))\r\n\r\nexport default {\r\n  components: {\r\n    asyncComponent: {\r\n      props: {\r\n        index: Number,\r\n        sent: Boolean\r\n      },\r\n\r\n      data () {\r\n        return {\r\n          asyncContent: null\r\n        }\r\n      },\r\n\r\n      beforeMount () {\r\n        this.timer = setTimeout(() => {\r\n          this.asyncContent = {\r\n            sent: this.sent,\r\n            name: this.sent === true ? 'me' : 'Someone else',\r\n            avatar: this.sent === true ? 'https://cdn.quasar.dev/img/avatar4.jpg' : 'https://cdn.quasar.dev/img/avatar3.jpg',\r\n            stamp: `${Math.floor(this.index / 1000)} minutes ago`,\r\n            text: [ `Message with id ${this.index}` ]\r\n          }\r\n        }, 300 + Math.random() * 2000)\r\n      },\r\n\r\n      beforeDestroy () {\r\n        clearTimeout(this.timer)\r\n      },\r\n\r\n      render (h) {\r\n        if (this.asyncContent === Object(this.asyncContent)) {\r\n          return h('q-chat-message', {\r\n            staticClass: 'q-mx-sm',\r\n            key: this.index,\r\n            props: this.asyncContent\r\n          })\r\n        }\r\n        else {\r\n          const content = [\r\n            h('q-skeleton', { staticClass: 'on-left on-right', props: { animation: 'none', type: 'text', width: '150px', height: '100px' } })\r\n          ]\r\n\r\n          content[this.sent === true ? 'push' : 'unshift'](\r\n            h('q-skeleton', { props: { animation: 'none', type: 'QAvatar' } })\r\n          )\r\n\r\n          return h('div', {\r\n            staticClass: `row no-wrap items-center q-mx-sm justify-${this.sent === true ? 'end' : 'start'}`,\r\n            style: 'height: 78px',\r\n            key: this.index\r\n          }, content)\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      size\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    getItems (from, size) {\r\n      const items = []\r\n\r\n      for (let i = 0; i < size; i++) {\r\n        items.push(allItems[from + i])\r\n      }\r\n\r\n      return Object.freeze(items)\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n"},7556:function(r,n,t){"use strict";t.r(n),n["default"]="<template>\r\n  <div class=\"q-pa-md\">\r\n    <q-virtual-scroll\r\n      type=\"table\"\r\n      style=\"max-height: 70vh\"\r\n      :virtual-scroll-item-size=\"48\"\r\n      :virtual-scroll-sticky-size-start=\"48\"\r\n      :virtual-scroll-sticky-size-end=\"32\"\r\n      :items=\"heavyList\"\r\n    >\r\n      <template v-slot:before>\r\n        <thead class=\"text-left\">\r\n          <tr>\r\n            <th>Index</th>\r\n            <th v-for=\"col in columns\" :key=\"'1--' + col.name\">\r\n              {{ col.name }}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n      </template>\r\n\r\n      <template v-slot:after>\r\n        <tfoot class=\"text-left\">\r\n          <tr>\r\n            <th>Index</th>\r\n            <th v-for=\"col in columns\" :key=\"'2--' + col.name\">\r\n              {{ col.name }}\r\n            </th>\r\n          </tr>\r\n        </tfoot>\r\n      </template>\r\n\r\n      <template v-slot=\"{ item: row, index }\">\r\n        <tr :key=\"index\">\r\n          <td>#{{ index }}</td>\r\n          <td v-for=\"column in columns\" :key=\"index + '-' + column.name\">\r\n            {{ row[column.prop] }}\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </q-virtual-scroll>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst data = [\r\n  {\r\n    name: 'Frozen Yogurt',\r\n    calories: 159,\r\n    fat: 6.0,\r\n    carbs: 24,\r\n    protein: 4.0,\r\n    sodium: 87,\r\n    calcium: '14%'\r\n  },\r\n  {\r\n    name: 'Ice cream sandwich',\r\n    calories: 237,\r\n    fat: 9.0,\r\n    carbs: 37,\r\n    protein: 4.3,\r\n    sodium: 129,\r\n    calcium: '8%'\r\n  },\r\n  {\r\n    name: 'Eclair',\r\n    calories: 262,\r\n    fat: 16.0,\r\n    carbs: 23,\r\n    protein: 6.0,\r\n    sodium: 337,\r\n    calcium: '6%'\r\n  },\r\n  {\r\n    name: 'Cupcake',\r\n    calories: 305,\r\n    fat: 3.7,\r\n    carbs: 67,\r\n    protein: 4.3,\r\n    sodium: 413,\r\n    calcium: '3%'\r\n  },\r\n  {\r\n    name: 'Gingerbread',\r\n    calories: 356,\r\n    fat: 16.0,\r\n    carbs: 49,\r\n    protein: 3.9,\r\n    sodium: 327,\r\n    calcium: '7%'\r\n  },\r\n  {\r\n    name: 'Jelly bean',\r\n    calories: 375,\r\n    fat: 0.0,\r\n    carbs: 94,\r\n    protein: 0.0,\r\n    sodium: 50,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Lollipop',\r\n    calories: 392,\r\n    fat: 0.2,\r\n    carbs: 98,\r\n    protein: 0,\r\n    sodium: 38,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Honeycomb',\r\n    calories: 408,\r\n    fat: 3.2,\r\n    carbs: 87,\r\n    protein: 6.5,\r\n    sodium: 562,\r\n    calcium: '0%'\r\n  },\r\n  {\r\n    name: 'Donut',\r\n    calories: 452,\r\n    fat: 25.0,\r\n    carbs: 51,\r\n    protein: 4.9,\r\n    sodium: 326,\r\n    calcium: '2%'\r\n  },\r\n  {\r\n    name: 'KitKat',\r\n    calories: 518,\r\n    fat: 26.0,\r\n    carbs: 65,\r\n    protein: 7,\r\n    sodium: 54,\r\n    calcium: '12%'\r\n  }\r\n]\r\n\r\nconst columns = [\r\n  { name: 'Dessert (100g serving)', prop: 'name' },\r\n  { name: 'Calories', prop: 'calories' },\r\n  { name: 'Fat (g)', prop: 'fat' },\r\n  { name: 'Carbs (g)', prop: 'carbs' },\r\n  { name: 'Protein (g)', prop: 'protein' },\r\n  { name: 'Sodium (mg)', prop: 'sodium' },\r\n  { name: 'Calcium (%)', prop: 'calcium' }\r\n]\r\n\r\nconst heavyList = []\r\n\r\n// adding same data multiple times to\r\n// create a huge list\r\nfor (let i = 0; i <= 1000; i++) {\r\n  Array.prototype.push.apply(heavyList, data)\r\n}\r\n\r\n// we are not going to change these arrays,\r\n// so why not freeze them to avoid Vue adding overhead\r\n// with state change detection\r\nObject.freeze(heavyList)\r\nObject.freeze(columns)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n      columns\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n"},"7d70":function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <q-virtual-scroll\r\n    style="max-height: 300px;"\r\n    :items="heavyList"\r\n    separator\r\n  >\r\n    <template v-slot="{ item, index }">\r\n      <q-item\r\n        :key="index"\r\n        dense\r\n      >\r\n        <q-item-section>\r\n          <q-item-label>\r\n            #{{ index }} - {{ item.label }}\r\n          </q-item-label>\r\n        </q-item-section>\r\n      </q-item>\r\n    </template>\r\n  </q-virtual-scroll>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1)\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n'},"9cc9":function(r,n,t){"use strict";t.r(n),n["default"]="<template>\r\n  <div class=\"q-pa-md\">\r\n    <q-virtual-scroll\r\n      type=\"table\"\r\n      style=\"max-height: 70vh\"\r\n      :virtual-scroll-item-size=\"48\"\r\n      :virtual-scroll-sticky-size-start=\"48\"\r\n      :virtual-scroll-sticky-size-end=\"32\"\r\n      :items=\"heavyList\"\r\n    >\r\n      <template v-slot=\"{ item: row, index }\">\r\n        <tr :key=\"index\">\r\n          <td>#{{ index }}</td>\r\n          <td v-for=\"col in columns\" :key=\"index + '-' + col\">\r\n            {{ row[col] }}\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </q-virtual-scroll>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst data = [\r\n  {\r\n    name: 'Frozen Yogurt',\r\n    calories: 159,\r\n    fat: 6.0,\r\n    carbs: 24,\r\n    protein: 4.0,\r\n    sodium: 87,\r\n    calcium: '14%',\r\n    iron: '1%'\r\n  },\r\n  {\r\n    name: 'Ice cream sandwich',\r\n    calories: 237,\r\n    fat: 9.0,\r\n    carbs: 37,\r\n    protein: 4.3,\r\n    sodium: 129,\r\n    calcium: '8%',\r\n    iron: '1%'\r\n  },\r\n  {\r\n    name: 'Eclair',\r\n    calories: 262,\r\n    fat: 16.0,\r\n    carbs: 23,\r\n    protein: 6.0,\r\n    sodium: 337,\r\n    calcium: '6%',\r\n    iron: '7%'\r\n  },\r\n  {\r\n    name: 'Cupcake',\r\n    calories: 305,\r\n    fat: 3.7,\r\n    carbs: 67,\r\n    protein: 4.3,\r\n    sodium: 413,\r\n    calcium: '3%',\r\n    iron: '8%'\r\n  },\r\n  {\r\n    name: 'Gingerbread',\r\n    calories: 356,\r\n    fat: 16.0,\r\n    carbs: 49,\r\n    protein: 3.9,\r\n    sodium: 327,\r\n    calcium: '7%',\r\n    iron: '16%'\r\n  },\r\n  {\r\n    name: 'Jelly bean',\r\n    calories: 375,\r\n    fat: 0.0,\r\n    carbs: 94,\r\n    protein: 0.0,\r\n    sodium: 50,\r\n    calcium: '0%',\r\n    iron: '0%'\r\n  },\r\n  {\r\n    name: 'Lollipop',\r\n    calories: 392,\r\n    fat: 0.2,\r\n    carbs: 98,\r\n    protein: 0,\r\n    sodium: 38,\r\n    calcium: '0%',\r\n    iron: '2%'\r\n  },\r\n  {\r\n    name: 'Honeycomb',\r\n    calories: 408,\r\n    fat: 3.2,\r\n    carbs: 87,\r\n    protein: 6.5,\r\n    sodium: 562,\r\n    calcium: '0%',\r\n    iron: '45%'\r\n  },\r\n  {\r\n    name: 'Donut',\r\n    calories: 452,\r\n    fat: 25.0,\r\n    carbs: 51,\r\n    protein: 4.9,\r\n    sodium: 326,\r\n    calcium: '2%',\r\n    iron: '22%'\r\n  },\r\n  {\r\n    name: 'KitKat',\r\n    calories: 518,\r\n    fat: 26.0,\r\n    carbs: 65,\r\n    protein: 7,\r\n    sodium: 54,\r\n    calcium: '12%',\r\n    iron: '6%'\r\n  }\r\n]\r\n\r\nconst columns = [\r\n  'name',\r\n  'calories',\r\n  'fat',\r\n  'carbs',\r\n  'protein',\r\n  'sodium',\r\n  'calcium',\r\n  'iron'\r\n]\r\n\r\nconst heavyList = []\r\n\r\n// adding same data multiple times to\r\n// create a huge list\r\nfor (let i = 0; i <= 1000; i++) {\r\n  Array.prototype.push.apply(heavyList, data)\r\n}\r\n\r\n// we are not going to change this array,\r\n// so why not freeze it to avoid Vue adding overhead\r\n// with state change detection\r\nObject.freeze(heavyList)\r\nObject.freeze(columns)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n      columns\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n"},ac3e:function(r,n,t){"use strict";t.r(n),n["default"]="<template>\r\n  <div class=\"q-ma-md\">\r\n    <q-scroll-area\r\n      :thumb-style=\"thumbStyle\"\r\n      :bar-style=\"barStyle\"\r\n      style=\"height: 200px\"\r\n      id=\"scroll-area-with-virtual-scroll-1\"\r\n    >\r\n      <q-virtual-scroll\r\n        scroll-target=\"#scroll-area-with-virtual-scroll-1 > .scroll\"\r\n        :items=\"heavyList\"\r\n        :virtual-scroll-item-size=\"32\"\r\n        separator\r\n      >\r\n        <template v-slot=\"{ item, index }\">\r\n          <q-item\r\n            :key=\"index\"\r\n            dense\r\n          >\r\n            <q-item-section>\r\n              <q-item-label>\r\n                #{{ index }} - {{ item.label }}\r\n              </q-item-label>\r\n            </q-item-section>\r\n          </q-item>\r\n        </template>\r\n      </q-virtual-scroll>\r\n    </q-scroll-area>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: 'Option ' + (i + 1)\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList,\r\n\r\n      thumbStyle: {\r\n        right: '5px',\r\n        borderRadius: '8px',\r\n        backgroundColor: '#027be3',\r\n        width: '8px',\r\n        opacity: 0.75\r\n      },\r\n\r\n      barStyle: {\r\n        right: '2px',\r\n        borderRadius: '14px',\r\n        backgroundColor: '#027be3',\r\n        width: '14px',\r\n        opacity: 0.2,\r\n        marginTop: '-3px',\r\n        marginBottom: '-3px',\r\n        paddingTop: '3px',\r\n        paddingBottom: '3px'\r\n      }\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n"},b220:function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <q-virtual-scroll\r\n    :items="heavyList"\r\n    virtual-scroll-horizontal\r\n  >\r\n    <template v-slot="{ item, index }">\r\n      <div\r\n        :key="index"\r\n        :class="item.class"\r\n      >\r\n        #{{ index }} - {{ item.label }}\r\n      </div>\r\n    </template>\r\n  </q-virtual-scroll>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1),\r\n    class: i % 2 === 0 ? \'q-pa-md self-center bg-grey-2 text-black\' : \'q-pa-lg bg-black text-white\'\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n'},ce1a:function(r,n,t){"use strict";t.r(n),n["default"]='<template>\r\n  <q-virtual-scroll\r\n    style="max-height: 300px;"\r\n    :items="heavyList"\r\n    separator\r\n  >\r\n    <template v-slot="{ item, index }">\r\n      <q-banner v-if="item.banner === true" class="bg-black text-white q-py-xl" :key="index">\r\n        #{{ index }} - {{ item.label }}\r\n      </q-banner>\r\n\r\n      <q-item\r\n        v-else\r\n        :key="index"\r\n        dense\r\n        clickable\r\n      >\r\n        <q-item-section>\r\n          <q-item-label>\r\n            #{{ index }} - {{ item.label }}\r\n          </q-item-label>\r\n        </q-item-section>\r\n      </q-item>\r\n    </template>\r\n  </q-virtual-scroll>\r\n</template>\r\n\r\n<script>\r\nconst maxSize = 10000\r\nconst heavyList = []\r\n\r\nfor (let i = 0; i < maxSize; i++) {\r\n  heavyList.push({\r\n    label: \'Option \' + (i + 1),\r\n    banner: i % 5 === 0\r\n  })\r\n}\r\n\r\nObject.freeze(heavyList)\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      heavyList\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n'}}]);